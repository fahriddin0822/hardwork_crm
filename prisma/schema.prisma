// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Branch {
  id         Int      @id @default(autoincrement())
  name       String
  address    String   @unique
  call_numer String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  groups     Group[] // One-to-many relation to Group
}

model LidReason {
  id         Int    @id @default(autoincrement())
  reason_lid String
  Lid        Lid[]
}

model LidStatus {
  id     Int    @id @default(autoincrement())
  status String
  Lid    Lid[]
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique

  StaffRole StaffRole[]
}

model StaffRole {
  staff   Staff @relation(fields: [staffId], references: [id])
  staffId Int

  role   Role @relation(fields: [roleId], references: [id])
  roleId Int

  @@id([staffId, roleId])
  @@map("staff_role")
}

model Staff {
  id              Int         @id @default(autoincrement())
  first_name      String
  last_name       String
  phone_number    String
  login           String      @unique
  hashed_password String
  is_active       Boolean     @default(true)
  StaffRole       StaffRole[]
}

model Group {
  id                Int      @id @default(autoincrement())
  group_name        String
  lesson_start_time String
  lesson_continuous String
  lesson_week_day   String[]
  group_stage_id    Int
  room_number       String
  room_floor        Int
  branch_id         Int
  lessons_quant     Int
  is_active         Boolean
  Branch            Branch?  @relation(fields: [branchId], references: [id])
  branchId          Int?

  @@map("group")
}

model Stage {
  id   Int    @id @default(autoincrement())
  name String
}

model Lid {
  id                    Int        @id @default(autoincrement())
  first_name            String
  last_name             String
  phone_number          String
  target_id             Int
  lid_stage_id          Int
  test_date             DateTime
  trial_lesson_date     DateTime
  trial_lesson_time     String
  trial_lesson_group_id Int
  LidStatus             LidStatus  @relation(fields: [lid_status_id], references: [id])
  lid_status_id         Int
  LidReason             LidReason? @relation(fields: [cancel_reason_id], references: [id])
  cancel_reason_id      Int?
}

model Target {
  id   Int    @id @default(autoincrement())
  name String
}

model Payment {
  id                Int       @id @default(autoincrement())
  student_id        Int
  payment_last_date String
  payment_date      DateTime
  price             Decimal
  is_paid           Boolean
  total_attent      Int
  Students          Students? @relation(fields: [studentsId], references: [id])
  studentsId        Int?
}

model Students {
  id           Int       @id @default(autoincrement())
  lid_id       Int
  first_name   String
  last_name    String
  phone_number String
  birthday     DateTime
  gender       Boolean
  Payments     Payment[]
}

model Lessons {
  id            Int      @id @default(autoincrement())
  lesson_theme  String
  lesson_number Int
  group_id      Int
  lesson_date   DateTime
}

model StudentLessons {
  id         Int     @id @default(autoincrement())
  lesson_id  Int
  student_id Int
  is_there   Boolean
  reason     String
  is_paid    Boolean
}
